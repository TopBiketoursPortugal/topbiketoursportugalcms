---
import { getCollection, z } from 'astro:content';
import slugify from 'slugify';
import Card from 'src/components/card/Card.astro';
import CardContent from 'src/components/card/CardContent.astro';
import CardMedia from 'src/components/card/CardMedia.astro';
import Grid from 'src/components/grid/grid.astro';
import Prose from 'src/components/prose/prose.astro';
import Rating from 'src/components/rating/rating.astro';
import Stack from 'src/components/stack/stack.astro';
import Icon from 'src/components/utility/icon';
import type { languageSchema } from 'src/schemas/language';
import { getTourPath } from 'utils/permalinks';
import Languages from 'src/../data/languages.json';
import { getMarkdownExcerpt } from 'utils/get-markdown-excerpt';

type Props = {
  type: 'tours' | 'reviews' | 'team' | 'bikes' | 'posts';
  display: 'slideshow' | 'list';
  contentDisplay: 'overlay' | 'inline';
  frame: 'none' | 'light' | 'heavy';
  layout: 'horizontal' | 'vertical';
  title: string;
  language?: z.infer<typeof languageSchema>;
  heading: { text: string };
};

const { heading, language = 'en', contentDisplay = 'inline' } = Astro.props;

const tours = await getCollection('tours');
const items =
  tours
    .filter((item) => item.data.language === language)
    .sort((a, b) => (a?.data?.order ?? 0) - (b?.data?.order ?? 0)) ?? [];

// Generate the JSON-LD schema
const schema = {
  '@context': 'https://schema.org/',
  '@graph': items.map(({ data: tour }) => {
    const bestRating = 5;
    const worstRating = 1;

    return {
      '@type': 'Product',
      name: tour.title,
      description: tour.description,
      brand: {
        '@type': 'Brand',
        name: 'Top Bike Tours Portugal'
      },
      aggregateRating: {
        '@type': 'AggregateRating',
        ratingValue: (tour.reviews ?? [])
          .map((r) => r.rating)
          .reduce((accumulator, currentValue) => accumulator + currentValue, 0),
        reviewCount: (tour.reviews ?? []).length,
        bestRating,
        worstRating
      },
      offers: {
        '@type': 'Offer',
        highPrice: Math.max(
          ...(tour.packages?.map(
            (p) => p.price.promo ?? p.price.price ?? 0
          ) ?? [0])
        ),
        lowPrice: Math.min(
          ...(tour.packages?.map(
            (p) => p.price.promo ?? p.price.price ?? 0
          ) ?? [0])
        ),
        offerCount: tour.packages?.length ?? 1,
        offers: tour.packages?.map((p) => ({
          '@type': 'Offer',
          name: p.title,
          url: Astro.site + getTourPath(tour, language)
        })),
        priceCurrency: 'EUR',
        availability: 'https://schema.org/InStock'
      },
      review: tour.reviews.map((review: any) => ({
        '@type': 'Review',
        reviewRating: {
          '@type': 'Rating',
          ratingValue: review.rating,
          bestRating,
          worstRating
        },
        author: {
          '@type': 'Person',
          givenName: review.author?.givenName,
          familyName: review.author?.familyName,
          address: {
            '@type': 'PostalAddress',
            addressCountry: review.author?.country
          }
        },
        datePublished: review.publishDate,
        reviewBody: review.content
      }))
    };
  })
};
---

<Stack class="border-solid p-6" layout="vertical">
  <Prose markdown={heading.text} />
  <Grid cols={3}>
    {
      items.map(({ data }) => {
        const {
          image,
          content,
          duration,
          tags,
          language,
          packages = []
        } = data;
        const minPrice = Math.min(...packages.map((p) => p.price.price ?? 0));
        const minPromoPrice = Math.max(
          ...packages.map((p) => p.price.promo ?? 0)
        );
        const priceFormat = new Intl.NumberFormat(Languages[language].locale, {
          style: 'currency',
          currency: packages[0].price.currency
        });
        return (
          <Card href={getTourPath(data)} frame="light" {...data}>
            {image && <CardMedia {...image} />}
            <CardContent
              display={contentDisplay}
              class="px-10 pb-8 pt-6 sm:max-xl:px-4"
            >
              <h3 class="font-oswald line-clamp-2 text-xl font-bold">
                {data.title}
              </h3>
              <p class="line-clamp-5 text-lg/relaxed text-gray-600">
                {getMarkdownExcerpt(content ?? '', 300)}
              </p>

              <Stack spacing="medium" layout="vertical" class="w-full">
                {duration && (
                  <span class="text-gray-600">
                    {duration} days / {duration - 1} nights
                  </span>
                )}

                <Stack
                  distribution="spaceBetween"
                  alignment="center"
                  class="w-full"
                >
                  <Rating rating={4} />
                  <Stack spacing="small" alignment="trailing" layout="vertical">
                    {minPromoPrice > 0 && (
                      <span class="line-through">
                        {priceFormat.format(minPrice)}
                      </span>
                    )}
                    <span class="text-xl font-bold">
                      {priceFormat.format(
                        minPromoPrice > 0 ? minPromoPrice : minPrice
                      )}
                    </span>
                  </Stack>
                </Stack>
              </Stack>

              <Separator weight="thin" color="neutral" />

              {tags && (
                <Stack spacing="small" alignment="center" class="flex-wrap">
                  <Icon
                    icon="ph:bookmark-simple-thin"
                    class="h-5 w-5 text-gray-600"
                  />
                  {tags.split('\n').map((t) => (
                    <LinkButton
                      variant="link"
                      class="z-50"
                      href={`/tours/tags/${slugify(t)}/`}
                    >
                      {t}
                    </LinkButton>
                  ))}
                </Stack>
              )}
            </CardContent>
          </Card>
        );
      })
    }
  </Grid>
</Stack>
<script
  is:inline
  async
  type="application/ld+json"
  set:html={JSON.stringify(schema)}
/>
