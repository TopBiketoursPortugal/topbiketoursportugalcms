---
import { getCollection } from 'astro:content';
import Stack from 'src/components/stack/stack.astro';
import type { LanguageCodes } from 'src/schemas/language';
import Grid from 'src/components/grid/grid.astro';
import ReviewListSchema from './review-list-schema.astro';
import ReviewItem from './review-item.astro';
import type { ReviewSchema, TourSchema } from 'src/schemas/tours';
import { undefined } from 'astro:schema';

type Props = {
  type: 'reviews';
  display: 'slideshow' | 'list';
  contentDisplay: 'overlay' | 'inline';
  frame: 'none' | 'light' | 'heavy';
  layout: 'horizontal' | 'vertical';
  title: string;
};

const language = (Astro.currentLocale ?? 'en') as LanguageCodes;
const testimonials = (
  await getCollection('testimonials', (t) => t.data.language === language)
).map(
  (t) =>
    ({
      content: t.body ?? '',
      rating: t.data.score,
      title: t.data.title,
      author: {
        country: t.data.author.country ?? '',
        givenName: t.data.author.name ?? ''
      },
      source: {
        url: t.data.reviewSource,
        name:
          t.data.reviewSource?.indexOf('tripadvisor') !== -1
            ? 'TripAdvisor'
            : ''
      }
    }) satisfies ReviewSchema
);
const tours = (await getCollection('tours')).filter(
  (r) => r.data.language === language
);
const items = (tours.flatMap((t) => t.data.reviews ?? []) ?? [])
  .concat(testimonials ?? [])
  .sort((a, b) => {
    const dateA = new Date(a.publishDate ?? '').getTime();
    const dateB = new Date(b.publishDate ?? '').getTime();
    return dateB - dateA; // For descending order (newest first)
  });
---

<Stack class="border-solid sm:p-6" layout="vertical">
  <Grid cols={3}>
    {
      items.map((review) => {
        return (
          <ReviewItem
            name={`${review.author?.givenName}${
              review.author?.familyName && review.author?.familyName.length > 0
                ? ' ' + review.author?.familyName
                : ''
            }`}
            country={review.author?.country}
            content={review.content}
            rating={review.rating}
            photo={review.image?.src}
          />
        );
      })
    }
  </Grid>
</Stack>
<ReviewListSchema items={tours} />
