---
import { twMerge } from 'tailwind-merge';
import Icon from '../utility/icon.astro';
import { cn } from 'utils/cn';
import type { Item } from 'src/types';

export type ItemGrid = {
  items?: Array<Item>;
  columns?: number;
  defaultIcon?: string;
  classes?: Record<string, string>;
};

type Props = ItemGrid;

const {
  items = [],
  columns,
  defaultIcon = 'ph:arrow-right-light',
  classes = {}
} = Astro.props;

const {
  container: containerClass = '',
  panel: panelClass = '',
  title: titleClass = '',
  description: descriptionClass = '',
  icon: defaultIconClass = 'text-primary',
  action: actionClass = ''
} = classes;
---

{
  items && (
    <div
      class={twMerge(
        `mx-auto grid gap-8 md:gap-y-12 ${
          columns === 4
            ? 'sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4'
            : columns === 3
              ? 'sm:grid-cols-2 lg:grid-cols-3'
              : columns === 2
                ? 'sm:grid-cols-2'
                : ''
        }`,
        containerClass
      )}
    >
      {items.map(
        ({
          title,
          description,
          icon,
          callToAction,
          classes: itemClasses = {}
        }) => (
          <div class="intersect-once motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0">
            <div
              class={twMerge(
                'flex max-w-md flex-row',
                panelClass,
                itemClasses?.panel
              )}
            >
              <div class="flex justify-center">
                {(icon || defaultIcon) && (
                  <Icon
                    icon={icon || defaultIcon}
                    className={cn(
                      'mr-2 h-7 w-7 rtl:ml-2 rtl:mr-0',
                      defaultIconClass,
                      itemClasses?.icon
                    )}
                  />
                )}
              </div>
              <div class="mt-0.5">
                {title && (
                  <h3
                    class={twMerge(
                      'text-xl font-bold',
                      titleClass,
                      itemClasses?.title
                    )}
                  >
                    {title}
                  </h3>
                )}
                {description && (
                  <p
                    class={twMerge(
                      `${title ? 'mt-3' : ''} text-muted`,
                      descriptionClass,
                      itemClasses?.description
                    )}
                    set:html={description}
                  />
                )}
                {callToAction && (
                  <div
                    class={twMerge(
                      `${title || description ? 'mt-3' : ''}`,
                      actionClass,
                      itemClasses?.actionClass
                    )}
                  >
                    {/* <Button variant="link" {...callToAction} /> */}
                  </div>
                )}
              </div>
            </div>
          </div>
        )
      )}
    </div>
  )
}
