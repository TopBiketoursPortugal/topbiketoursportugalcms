---
import type { LanguageCodes } from 'src/schemas/language';
import Form from '../form/Form.astro';
import FormField from '../form/FormField.astro';
import { t } from 'utils/i18n';
import Prose from '../typography/prose.astro';
const language = (Astro.currentLocale ?? 'en') as LanguageCodes;
---

<Form action="https://formspree.io/xzbalqpw" method="post" id="tour-form">
  <FormField
    as="input"
    name="name"
    required
    placeholder={t('Tour.Form.Name.Placeholder', language)}
    label={t('Tour.Form.Name.Label', language)}
  />
  <FormField
    as="input"
    name="email"
    type="email"
    required
    placeholder={t('Tour.Form.EmailAddress.Placeholder', language)}
    label={t('Tour.Form.EmailAddress.Label', language)}
  />
  <FormField
    as="input"
    name="phone"
    required
    type="phone"
    placeholder={t('Tour.Form.Phone.Placeholder', language)}
    label={t('Tour.Form.Phone.Label', language)}
  />
  <FormField
    as="input"
    type="date"
    name="tour-date"
    required
    label={t('Tour.Form.TourDate.Label', language)}
  />
  <FormField
    as="textarea"
    name="your-enquiry"
    required
    label={t('Tour.Form.YourEnquiry', language)}
  />
  <FormField
    as="textarea"
    rows="2"
    name="found"
    label={t('Tour.Form.Found.Label', language)}
    placeholder={t('Tour.Form.Found.Placeholder', language)}
  />

  <FormField
    as="select"
    options={[
      t('Tour.Form.TourType.OptionGuided', language),
      t('Tour.Form.TourType.OptionUnguided', language)
    ]}
    name="tour-type"
    label={t('Tour.Form.TourType.Label', language)}
    placeholder={t('Tour.Form.TourType.Placeholder', language)}
  />

  <FormField
    as="input"
    name="person"
    type="number"
    min="1"
    max="10"
    label={t('Tour.Form.NumberPersons', language)}
  />

  <FormField
    as="input"
    name="country"
    type="text"
    min="1"
    max="10"
    label={t('Tour.Form.Country.Label', language)}
    placeholder={t('Tour.Form.Country.Placeholder', language)}
  />

  <!-- Terms Checkbox with Modal Trigger -->
  <div class="flex items-center">
    <input
      type="checkbox"
      id="terms"
      name="terms"
      required
      aria-required="true"
      class="peer h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700"
    />
    <label for="terms" class="ml-2 text-sm text-gray-700 dark:text-gray-200">
      {t('Tour.Form.Terms.Text', language)}
      <label
        for="terms-toggle"
        class="cursor-pointer text-blue-600 hover:underline dark:text-blue-400"
      >
        {t('Tour.Form.Terms.LinkText', language)}
      </label>
      <span aria-hidden="true">*</span>
      <span class="sr-only">{t('Tour.Form.Terms.Required', language)}</span>
    </label>
  </div>

  <!-- Submit Button -->
  <div>
    <button
      slot="submit"
      type="submit"
      class="w-full rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
    >
      {t('Tour.Form.Submit.Text', language)}
    </button>
  </div>
</Form>

<!-- Modal Trigger Checkbox (hidden) -->
<input type="checkbox" id="terms-toggle" class="peer hidden" aria-hidden />

<!-- Terms and Conditions Modal -->
<div
  class="fixed inset-0 z-50 hidden items-center justify-center bg-gray-600 bg-opacity-50 transition-opacity duration-300 peer-checked:flex"
>
  <div
    class="max-h-[80vh] w-full max-w-lg transform overflow-y-auto rounded-lg bg-white p-6 shadow-xl transition-all duration-300 dark:bg-gray-800"
  >
    <div class="mb-4 flex items-center justify-between">
      <h2 class="text-xl font-bold text-gray-900 dark:text-white">
        {t('Tour.Form.Terms.Modal.Title', language)}
      </h2>
      <label
        for="terms-toggle"
        class="cursor-pointer text-2xl text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
      >
        Ã—
      </label>
    </div>

    <div
      class="peer-check:flex space-y-4 text-gray-700 peer-checked:opacity-100 dark:text-gray-200"
    >
      <Prose markdown={t('Tour.Form.Terms.Modal.Body', language)} />
    </div>

    <div class="mt-6 flex justify-end">
      <label
        for="terms-toggle"
        class="cursor-pointer rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
      >
        {t('Tour.Form.Terms.Modal.Close', language)}
      </label>
    </div>
  </div>
</div>

<style>
  /* Custom validation styles */
  input:invalid:focus,
  textarea:invalid:focus,
  select:invalid:focus {
    border-color: #ef4444;
    box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.2);
  }
</style>
