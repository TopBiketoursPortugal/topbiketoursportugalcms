---
import CardMedia from '../card/CardMedia.astro';
import { getTourPath, getTourTagPath } from 'utils/permalinks';
import CardContent, { type CardContentProps } from '../card/CardContent.astro';
import Card from '../card/Card.astro';
import Languages from 'src/../data/languages.json';
import type { LanguageCodes } from 'src/schemas/language';
import type { InferEntrySchema } from 'astro:content';
import { getMarkdownExcerpt } from 'utils/get-markdown-excerpt';
import Stack from '../stack/stack.astro';
import Rating from '../rating/rating.astro';
import Separator from '../separator/separator.astro';
import LinkButton from '../linkbutton/linkbutton.astro';
import Icon from '../utility/icon.astro';
import { t } from 'utils/i18n';

type Props = {
  tour: InferEntrySchema<'tours'>;
  language: LanguageCodes;
  contentDisplay: CardContentProps['display'];
};

const { tour: data, contentDisplay = 'inline' } = Astro.props;

const {
  image,
  content,
  duration,
  difficulty,
  tags = [],
  language,
  packages = [],
  tourtype,
  distance
} = data;

const minPrice = Math.min(...packages.map((p) => p.price?.price ?? 0));
const minPromoPrice = Math.max(...packages.map((p) => p.price?.promo ?? 0));
const priceFormat = new Intl.NumberFormat(Languages[language].locale, {
  style: 'currency',
  currency: (packages.length > 0 ? packages[0].price?.currency : null) ?? 'EUR'
});
---

<Card href={getTourPath(data, language)} frame="light" {...data}>
  {image && <CardMedia {...image} />}
  <CardContent display={contentDisplay} class="px-10 pb-8 pt-6 sm:max-xl:px-4">
    <h3 class="font-oswald line-clamp-2 text-xl font-bold">
      {data.title}
    </h3>
    <p class="line-clamp-5 text-lg/relaxed text-gray-600">
      {getMarkdownExcerpt(content ?? '', 300)}
    </p>

    <Stack spacing="medium" layout="vertical" class="w-full">
      {
        duration && (
          <span class="flex gap-2 text-gray-600">
            <Icon icon="ph:clock-countdown-light" /> {duration}{' '}
            {t('Tour.Info.Duration.Unit.Days')} / {duration - 1}{' '}
            {t('Tour.Info.Duration.Unit.Nights')}
          </span>
        )
      }
      {
        difficulty && (
          <span class="flex gap-2 text-gray-600">
            {tourtype !== 'PackageTour' ? (
              <Icon icon="ph:person-simple-walk-light" className="h-5 w-5" />
            ) : (
              <Icon icon="ph:person-simple-bike-light" className="h-5 w-5" />
            )}
            {t('Tour.Info.Difficulty.Label')} : {difficulty}/5
          </span>
        )
      }
      {
        distance ? (
          <div class="flex items-center gap-2">
            <Icon icon="ph:map-trifold-light" className="h-5 w-5" />
            <span>
              {t('Tour.Info.Distance.Label')}: {distance} km
            </span>
          </div>
        ) : null
      }
      <Rating rating={4} />
      <Stack
        spacing="small"
        alignment="trailing"
        layout="vertical"
        class="w-full"
      >
        {
          minPromoPrice > 0 && (
            <span class="line-through">{priceFormat.format(minPrice)}</span>
          )
        }
        <span class="text-xl font-bold">
          {priceFormat.format(minPromoPrice > 0 ? minPromoPrice : minPrice)}
        </span>
      </Stack>
    </Stack>

    <Separator weight="thin" color="neutral" />

    {
      tags && tags.length > 0 && (
        <Stack spacing="small" alignment="center" class="flex-wrap">
          <Icon
            icon="ph:bookmark-simple-light"
            className="text-gray-600 h-5 w-5"
          />
          {tags.map((t) => (
            <LinkButton
              variant="link"
              class="z-50"
              href={getTourTagPath(t, language)}
            >
              {t}
            </LinkButton>
          ))}
        </Stack>
      )
    }
  </CardContent>
</Card>
