---
/** @jsxImportSource astro */

import TourForm from 'src/components/tours/tour-form.astro';
import TourPricing from 'src/components/tours/tour-pricing.astro';
import Languages from 'src/../data/languages.json';
import { getAggregatedReviews } from 'utils/reviews';
import TabItem from '../tabs/TabItem.astro';
import Tabs from '../tabs/Tabs.astro';
import { cn } from 'utils/cn';
import Tooltip from '../tooltip/tooltip.astro';
import Separator from '../separator/separator.astro';
import Rating from '../rating/rating.astro';
import Gallery from '../gallery/gallery.astro';
import Prose from '../typography/prose.astro';
import { getImageByPath } from 'utils/get-image';
import defaultImage from 'src/assets/images/team/sergio-marques.jpg';
import ResponsiveImage from '../responsive-image/ResponsiveImage.astro';
import { Image } from 'astro:assets';
import type { VisuallyEditable } from 'src/types';
import type { InferEntrySchema } from 'astro:content';
import type { LanguageCodes } from 'src/schemas/language';
import TourFaqs from './tour-faqs.astro';
import TourRelated from './tour-related.astro';
import { t } from 'utils/i18n';
import TourItinerary from './tour-itinerary.astro';
import Icon from '../utility/icon.astro';
import Heading from '../typography/heading.astro';

type Props = { tour: InferEntrySchema<'tours'> } & VisuallyEditable;

const { tour } = Astro.props;

const language = (Astro.currentLocale ?? 'en') as LanguageCodes;
const {
  packages = [],
  itinerary = [],
  faqs,
  reviews = [],
  relatedTours = [],
  mapUrl = '',
  image
} = tour;

const { average, count } = getAggregatedReviews(reviews);
const minPrice = packages.length > 0 ? Math.min(...packages.map((p) => p.price?.price ?? 0)) : 0;
const minPromoPrice = packages.length > 0 ? Math.max(...packages.map((p) => p.price?.promo ?? 0)) : 0;
const priceFormat = new Intl.NumberFormat(Languages[language].locale, {
  style: 'currency',
  currency: (packages.length > 0 ? packages[0].price?.currency : null) ?? 'EUR'
});
const isPromotional = minPromoPrice > 0;
const enableFaqs = false;
---

{image && <ResponsiveImage {...image} class="max-h-72" />}
<div
  class="line-container mx-auto grid w-full grid-cols-1 justify-between gap-10 scroll-smooth px-4 sm:grid-cols-[3fr_minmax(min(200px,100%),1fr)] sm:px-6 lg:px-8"
>
  <div class="overflow-auto sm:overflow-hidden">
    <Tabs>
      <TabItem href="#detail" text={t('Tour.Tab.Details', language)} selected />
      {
        itinerary.length > 0 ? (
          <TabItem href="#itinerary" text={t('Tour.Tab.Itinerary', language)} />
        ) : null
      }
      {
        packages?.length > 0 ? (
          <TabItem href="#packages" text={t('Tour.Tab.Packages', language)} />
        ) : null
      }
      <TabItem href="#photos" text={t('Tour.Tab.Photos', language)} />
      {
        mapUrl.length > 0 ? (
          <TabItem href="#map" text={t('Tour.Tab.Map', language)} />
        ) : null
      }
      <TabItem href="#reviews" text={t('Tour.Tab.Reviews', language)} />
      {
        enableFaqs ? (
          <TabItem href="#faqs" text={t('Tour.Tab.Faqs', language)} />
        ) : null
      }
    </Tabs>
  </div>
  <section
    class="z-50 row-span-4 mx-auto -mt-24 flex w-full flex-shrink flex-col items-start justify-start gap-6 self-baseline rounded-lg bg-white p-4 shadow-lg dark:bg-gray-800"
  >
  {  minPrice>0 || minPromoPrice>0?
    (<div class="relative flex items-center gap-2">
      <Icon icon="ph:tag-light" className="h4 w-4" />
      <span class="self-end text-sm text-gray-500"
        >{t('Tour.Form.FromPrice', language)}</span
      >
      {
        minPrice > 0 ? (
          <span
            class={cn(
              isPromotional ? 'line-trough text-xl' : 'text-2xl font-bold'
            )}
          >
            {priceFormat.format(minPrice)}
          </span>
        ) : null
      }
      {
        isPromotional && minPromoPrice > 0 ? (
          <span class="font-bold">
            {isPromotional && priceFormat.format(minPromoPrice)}
          </span>
        ) : null
      }

      <div class="w-2 -translate-x-1">
        <Tooltip class="align-top">
          <Icon
            slot="trigger"
            icon="ph:info"
            title={t('Tour.Form.FromPrice.Info', language)}
          />
          <span slot="content">{t('Tour.Form.FromPrice.Info', language)}</span>
        </Tooltip>
      </div>
    </div>

    <Separator />):null}
    <strong>{t('Tour.Form.Title', language)}</strong>
    <TourForm />
  </section>
  <section class="col-end-2 mb-8 flex w-full flex-col gap-4">
    <div class="flex gap-3">
      <Rating rating={average} class="text-orange-500" />
      <span class="text-neutral-700"
        >({count} {t('Tour.Info.Reviews.Unit', language)})</span
      >
    </div>
    <div>
      <ul class="center grid grid-cols-3 items-center justify-center gap-4">
        {
          tour.duration ? (
            <li class="flex items-center gap-3">
              <Icon icon="ph:clock" className="h-5 w-5" />
              {tour.duration}
              {t('Tour.Info.Duration.Unit.Days', language)} /{' '}
              {(tour.duration ?? 0) - 1}
              {t('Tour.Info.Duration.Unit.Nights', language)}
            </li>
          ) : null
        }
        {
          (tour.groupSize?.min ?? 0) + (tour.groupSize?.max ?? 0) > 0 ? (
            <li class="flex items-center gap-3">
              <Icon icon="ph:users-three-light" className="h-5 w-5" />
              {t('Tour.Info.Group.Label', language)} :{' '}
              {tour.groupSize?.min ?? 0}-{tour.groupSize?.max ?? 0}
              {t('Tour.Info.Group.Unit', language)}
            </li>
          ) : null
        }
        {
          tour.distance ? (
            <li class="flex items-center gap-3">
              <Icon icon="ph:map-trifold-light" className="h-5 w-5" />
              {t('Tour.Info.Distance.Label', language)}: {tour.distance} km
            </li>
          ) : null
        }
        <li class="flex items-center gap-3">
          {
            tour.tourtype !== 'PackageTour' ? (
              <Icon icon="ph:person-simple-walk-light" className="h-5 w-5" />
            ) : (
              <Icon icon="ph:person-simple-bike-light" className="h-5 w-5" />
            )
          }
          {t('Tour.Info.Difficulty.Label', language)} : {tour.difficulty}/5
        </li>
        <li class="flex items-center gap-3">
          <Icon icon="ph:airplane-light" className="h-5 w-5" />{
            t('Tour.Info.ClosestAirport.Label', language)
          }: Aeroporto SÃ¡ Carneiro
        </li>
        {
          tour.minAge ? (
            <li class="flex items-center gap-3">
              <Icon icon="ph:user-light" className="h-5 w-5" />
              {t('Tour.Info.MinAge.Label', language)}: {tour.minAge}
            </li>
          ) : null
        }
      </ul>
    </div>
    <Separator />
    <Prose markdown={tour.content ?? ''} />
    <slot />
  </section>
  {
    itinerary.length > 0 ? (
      <section id="itinerary" class="col-span-full mb-8 flex flex-col gap-4">
        <Heading as="h2" class="mb-6">
          {t('Tour.Section.Itinerary.Title', language)}
        </Heading>
        <TourItinerary itinerary={itinerary} />
      </section>
    ) : null
  }
  {
    packages?.length > 0 ? (
      <section id="packages" class="col-span-full mb-8 grid grid-cols-4 gap-10">
        <Heading as="h2" class="mb-6">
          {t('Tour.Section.Packages.Title', language)}
        </Heading>

        <div class="col-span-full">
          <TourPricing language={language} packages={tour.packages} />

          <Prose
            markdown={tour.afterPricing ?? ''}
            class="col-span-full mt-8"
          />
        </div>
      </section>
    ) : null
  }
  <section id="photos" class="col-span-full mb-8 flex flex-col gap-4">
    <Heading as="h2" class="mb-6"
      >{t('Tour.Section.Photos.Title', language)}</Heading
    >
    <Gallery images={tour.images ?? []} />
  </section>

  {
    mapUrl.length > 0 ? (
      <section id="map" class="col-span-full mb-8 flex flex-col gap-4">
        <Heading as="h2" class="mb-6">
          {t('Tour.Section.Map.Title', language)}
        </Heading>
        (
        <div class="w-full select-none">
          <iframe title="tour" src={mapUrl} width={'100%'} height={'480'} />
        </div>
        )
      </section>
    ) : null
  }
  {
    enableFaqs ? (
      <section id="faqs" class="col-span-full mb-8 flex flex-col gap-4">
        <Heading as="h2" class="mb-6">
          {t('Tour.Section.Faq.Title', language)}
        </Heading>
        <TourFaqs faqs={faqs} language={language} />
      </section>
    ) : null
  }
  <section id="reviews" class="col-span-full mb-8 flex flex-col gap-4">
    <Heading as="h2" class="mb-6"
      >{t('Tour.Section.Reviews.Title', language)}</Heading
    >
    {
      reviews.length > 0 ? (
        <div class="grid grid-cols-1 gap-12">
          {reviews.map(
            async ({ image, travelerType, content, author, rating }) => {
              const imageOptimized = image
                ? (await getImageByPath(image.src)).default
                : defaultImage;
              const {
                country = '',
                givenName = '',
                familyName = ''
              } = author ?? {};
              const name = `${givenName} ${familyName}`.trimEnd();
              return (
                <div class="flex flex-row items-center justify-evenly gap-6">
                  <div class="flex grow">
                    <Image
                      src={imageOptimized}
                      widths={[320, 500, 640]}
                      sizes={`(max-width: 640px) 320px, (max-width: 960px) 500px, 640px`}
                      fetchpriority="auto"
                      decoding="async"
                      loading="lazy"
                      alt={name ?? country ?? 'review image'}
                      class="w-32 rounded-[100%] shadow-lg dark:shadow-black/30"
                    />
                  </div>
                  <div class="grow whitespace-nowrap">{name}</div>
                  <div>{travelerType ?? '-'}</div>
                  <div class="text-balance flex grow flex-col gap-4 whitespace-pre-line">
                    <Rating rating={rating} />
                    {content}
                  </div>
                </div>
              );
            }
          )}
        </div>
      ) : (
        <div>{t('Tour.Section.Reviews.Empty', language)}</div>
      )
    }
  </section>
  {
    relatedTours.length > 0 ? (
      <section id="related" class="col-span-full mb-8 flex flex-col gap-4">
        <Heading as="h2" class="mb-6">
          {t('Tour.Section.RelatedTours.Title', language)}
        </Heading>
        <TourRelated language={language} related={relatedTours} />
      </section>
    ) : null
  }
</div>
