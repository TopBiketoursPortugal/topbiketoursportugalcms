---
import type { JSX } from 'astro/jsx-runtime';
import { cn } from 'utils/cn';

const {
  name,
  required,
  label,
  layout = 'col',
  placeholder,
  as: Component = 'input',
  type,
  id,
  validationMessage = 'is required.',
  class: className,
  ...rest
} = Astro.props;

const container = layout === 'col' ? 'flex flex-col w-full ' : 'flex w-full';
---

<div class={cn(container, className, Component === 'hidden' ? 'hidden' : '')}>
  {
    Component !== 'hidden' ? (
      <label
        for={name}
        class="block text-sm font-medium text-gray-700 dark:text-gray-300"
      >
        {label}
        {required && (
          <>
            <span class="text-red-600 dark:text-red-400" aria-hidden="true">
              *
            </span>
            <span class="sr-only">(required)</span>
          </>
        )}
      </label>
    ) : null
  }

  {
    Component === 'hidden' && (
      <input
        id={id ?? name}
        name={name}
        type="hidden"
        required={required}
        aria-required={required}
        class="peer mt-1 hidden w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm invalid:border-red-500 invalid:text-red-600 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 dark:invalid:border-red-400 dark:invalid:text-red-300 dark:focus:border-indigo-600 dark:focus:ring-indigo-600"
        {...rest}
      />
    )
  }
  {
    Component === 'input' && (
      <input
        id={id ?? name}
        name={name}
        type={type}
        required={required}
        aria-required={required}
        class="peer mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm invalid:border-red-500 invalid:text-red-600 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 dark:invalid:border-red-400 dark:invalid:text-red-300 dark:focus:border-indigo-600 dark:focus:ring-indigo-600"
        {...rest}
      />
    )
  }

  {
    Component === 'textarea' && (
      <textarea
        id={id ?? name}
        name={name}
        required={required}
        aria-required={required}
        class="peer mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm invalid:border-red-500 invalid:text-red-600 focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 dark:invalid:border-red-400 dark:invalid:text-red-300 dark:focus:border-indigo-600 dark:focus:ring-indigo-600"
        {...rest}
      />
    )
  }

  {
    Component === 'select' && (
      <select
        id={id ?? name}
        name={name}
        required={required}
        aria-required={required}
        class="peer mt-1 block w-full rounded-md border border-gray-300 px-3 py-2 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-100 dark:focus:border-indigo-600 dark:focus:ring-indigo-600"
        {...rest}
      >
        {rest.options.map((option: JSX.OptionHTMLAttributes) => (
          <option value={(option.value + '').toLowerCase()}>{option}</option>
        ))}
      </select>
    )
  }

  {
    Component === 'checkbox' && (
      <div class="mt-1">
        <label class="inline-flex items-center">
          <input
            type="checkbox"
            id={id ?? name}
            name={name}
            required={required}
            aria-required={required}
            class="form-checkbox peer h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500 dark:border-gray-600 dark:text-indigo-500 dark:focus:ring-indigo-600"
            {...rest}
          />
          <span class="ml-2 text-sm text-gray-700 dark:text-gray-300">
            {label}
          </span>
        </label>
      </div>
    )
  }

  {
    required && Component !== 'hidden' && (
      <p class="mt-1 hidden text-sm text-red-600 peer-invalid:block dark:text-red-400">
        {label} {validationMessage}
      </p>
    )
  }
</div>
