---
import { getCollection } from 'astro:content';
import type { VisuallyEditable } from 'src/types';
import type { LanguageCodes } from 'src/schemas/language';
import Grid from '../grid/grid.astro';
import Stack from '../stack/stack.astro';
import ReviewItem from '../collection/review-item.astro';
import type { ReviewSchema } from 'src/schemas/tours';
type Props = {
  feature_testimonials: readonly string[];
} & VisuallyEditable;

const block = Astro.props;
const language = (Astro.currentLocale ?? 'en') as LanguageCodes;
const reviews: ReviewSchema[] = ((
  await getCollection('tours', (item) => item.data.language === language)
)
  .flatMap((t) => t.data.reviews)
  .filter((item) => block.feature_testimonials?.includes(item.id ?? '')) ??
  []) satisfies ReviewSchema[];
console.log(reviews);
const items = (
  await getCollection(
    'testimonials',
    (item) =>
      block.feature_testimonials?.includes(item.data.id) &&
      item.data.language === language
  )
).map(
  (t) =>
    ({
      content: t.body ?? '',
      rating: t.data.score,
      title: t.data.title,
      author: {
        country: t.data.author.country ?? '',
        givenName: t.data.author.name ?? ''
      },
      source: {
        url: t.data.reviewSource,
        name:
          t.data.reviewSource?.indexOf('tripadvisor') !== -1
            ? 'TripAdvisor'
            : ''
      }
    }) satisfies ReviewSchema
);
---

<Stack as="section" class="border-solid sm:p-6" layout="vertical">
  <Grid cols={3}>
    {
      items.map((review) => (
        <ReviewItem
          name={`${review.author?.givenName}`}
          country={review.author?.country}
          content={review.content}
          rating={review.rating}
        />
      ))
    }
  </Grid>
</Stack>
