---
import Layout from './Layout.astro';
import PostSummary from '../components/blog/summary.astro';
import { getCollection } from 'astro:content';
import type { MarkdownLayoutProps } from 'astro';
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';
import type { InferEntrySchema } from 'astro:content';

function isMarkdown(props: any): props is MarkdownLayoutProps<PostProps> {
  return props?.rawContent;
}

type PostProps = InferEntrySchema<'blog'>;

type Props = (PostProps & { body?: string }) | MarkdownLayoutProps<PostProps>;

const props =
  'frontmatter' in Astro.props ? Astro.props.frontmatter : Astro.props;
const content = isMarkdown(Astro.props)
  ? Astro.props.rawContent()
  : Astro.props.body;

const { title, date, author } = props;
const { src, alt } = props.image;
const wordCount = content?.split(' ')?.length ?? 0;
const readingTime = Math.floor(wordCount / 183);
const dateObj = new Date(date);

const posts = await getCollection('blog');
const filteredPosts = posts.filter((post) => post.data.title !== title);

const images = import.meta.glob<{ default: ImageMetadata }>(
  '/src/assets/**/*.{jpeg,jpg,png,gif}',
  { eager: true }
);

const imageSrc = images[src]?.default ?? src;
---

<Layout {...props}>
  <slot name="head" slot="head" />
  <main class="px-8 py-[48px] md:py-[96px]">
    <article class="mx-auto max-w-screen-md">
      <Image
        class="aspect-video rounded-lg"
        src={imageSrc}
        alt={alt ?? 'Post'}
        loading="lazy"
      />
      <h1
        class="py-4 text-3xl font-semibold sm:text-4xl md:text-5xl lg:text-6xl"
      >
        {title}
      </h1>
      <div
        class="flex flex-col justify-between py-5 text-sm font-light sm:gap-5"
      >
        <p class="post-data-list-item">
          {author}
        </p>

        <p class="post-data-list-item">
          {
            dateObj.toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })
          }
        </p>

        <div class="flex gap-3">
          <p>{wordCount}<span> words</span></p>
          <p>{readingTime}<span> minutes</span></p>
        </div>
      </div>
      <div class="markdown-text" data-cms-edit="content">
        <slot />
      </div>
    </article>
    <section
      class="mx-auto flex max-w-screen-md flex-col items-center pt-[48px]"
    >
      <h2 class="text-2xl">Recent Posts</h2>
      <div class="mt-5 grid gap-5 sm:grid-cols-2">
        {
          filteredPosts.slice(0, 2).map((post) => {
            return (
              <div class="max-w-[420px]">
                <PostSummary {...post} />
              </div>
            );
          })
        }
      </div>
    </section>
  </main>
</Layout>
