---
import 'vanilla-cookieconsent/dist/cookieconsent.css';
import 'src/styles/ccElegantBlack.css';
---

<script type="text/partytown">
  import { run } from 'vanilla-cookieconsent';
  import {
    CAT_ADVERTISEMENT,
    CAT_ANALYTICS,
    CAT_FUNCTIONALITY,
    CAT_SECURITY,
    config,
    SERVICE_AD_PERSONALIZATION,
    SERVICE_AD_STORAGE,
    SERVICE_AD_USER_DATA,
    SERVICE_ANALYTICS_STORAGE,
    SERVICE_FUNCTIONALITY_STORAGE,
    SERVICE_PERSONALIZATION_STORAGE,
    SERVICE_SECURITY_STORAGE
  } from './CookieConsentConfig';
  import CookieConsent from 'vanilla-cookieconsent';
  // toggle custom black theme
  document.body.classList.add('cc--elegant-black');

  function updateGtagConsent() {
    gtag('consent', 'update', {
      [SERVICE_ANALYTICS_STORAGE]: CookieConsent.acceptedService(
        SERVICE_ANALYTICS_STORAGE,
        CAT_ANALYTICS
      )
        ? 'granted'
        : 'denied',
      [SERVICE_AD_STORAGE]: CookieConsent.acceptedService(
        SERVICE_AD_STORAGE,
        CAT_ADVERTISEMENT
      )
        ? 'granted'
        : 'denied',
      [SERVICE_AD_USER_DATA]: CookieConsent.acceptedService(
        SERVICE_AD_USER_DATA,
        CAT_ADVERTISEMENT
      )
        ? 'granted'
        : 'denied',
      [SERVICE_AD_PERSONALIZATION]: CookieConsent.acceptedService(
        SERVICE_AD_PERSONALIZATION,
        CAT_ADVERTISEMENT
      )
        ? 'granted'
        : 'denied',
      [SERVICE_FUNCTIONALITY_STORAGE]: CookieConsent.acceptedService(
        SERVICE_FUNCTIONALITY_STORAGE,
        CAT_FUNCTIONALITY
      )
        ? 'granted'
        : 'denied',
      [SERVICE_PERSONALIZATION_STORAGE]: CookieConsent.acceptedService(
        SERVICE_PERSONALIZATION_STORAGE,
        CAT_FUNCTIONALITY
      )
        ? 'granted'
        : 'denied',
      [SERVICE_SECURITY_STORAGE]: CookieConsent.acceptedService(
        SERVICE_SECURITY_STORAGE,
        CAT_SECURITY
      )
        ? 'granted'
        : 'denied'
    });
  }

  // Trigger consent update when user choices change
  config.onFirstConsent = () => {
    updateGtagConsent();
  };
  config.onConsent = () => {
    updateGtagConsent();
  };
  config.onChange = () => {
    updateGtagConsent();
  };

  // Define dataLayer and the gtag function.
  window.dataLayer = window.dataLayer || [];
  function gtag() {
    dataLayer.push(arguments);
  }

  // Set default consent to 'denied' (this should happen before changing any other dataLayer)
  gtag('consent', 'default', {
    [SERVICE_AD_STORAGE]: 'denied',
    [SERVICE_AD_USER_DATA]: 'denied',
    [SERVICE_AD_PERSONALIZATION]: 'denied',
    [SERVICE_ANALYTICS_STORAGE]: 'denied',
    [SERVICE_FUNCTIONALITY_STORAGE]: 'denied',
    [SERVICE_PERSONALIZATION_STORAGE]: 'denied',
    [SERVICE_SECURITY_STORAGE]: 'denied'
  });

  run(config);
</script>
