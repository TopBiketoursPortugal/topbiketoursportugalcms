---
import Languages from 'src/../data/languages.json';
import Icon from 'src/components/utility/icon.astro';
import type { LanguageCodes } from 'src/schemas/language';

export type LanguageMenuItem = {
  code: LanguageCodes;
  locale?: string;
  path: string;
  display?: string;
  icon?: string;
};

type Props = { localizedUrls?: ReadonlyArray<LanguageMenuItem> };
const currenLanguage = (Astro.currentLocale ?? 'en') as LanguageCodes;
const languages = Object.values(Languages)
  .filter((l) => l.code !== currenLanguage)
  .map(
    ({ code, isDefault, display, icon }) =>
      ({
        code: code as LanguageCodes,
        display,
        icon,
        path: isDefault ? '/' : `/${code}/`,
        locale: Languages[code as LanguageCodes].locale
      }) satisfies LanguageMenuItem
  );

let { localizedUrls = [] } = Astro.props;

if (localizedUrls?.length === 0) {
  localizedUrls = languages;
} else {
  localizedUrls = localizedUrls.map((l) => ({
    ...l,
    display: l.display ?? Languages[l.code].display,
    icon: l.icon ?? Languages[l.code].icon,
    locale: Languages[l.code].locale
  }));
}
---

<div class="flex flex-row gap-4 text-2xl">
  {
    localizedUrls.map(({ locale, icon, display, path }) => (
      <a
        href={path}
        title={display}
        hreflang={locale}
        class="transition-transform duration-150 hover:scale-125"
      >
        <Icon title={display} icon={icon!} />
      </a>
    ))
  }
</div>
