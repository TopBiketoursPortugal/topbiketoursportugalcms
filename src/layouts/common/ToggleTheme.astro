---
import Icon from 'src/components/utility/icon.astro';

type Props = {
  enableSystem?: boolean;
  iconClass?: string;
};

const { enableSystem = false } = Astro.props;
---

<div x-cloak class="e relative inline-flex items-center gap-2">
  <p class="sr-only absolute -bottom-3 w-full text-center text-sm lg:-bottom-1">
    dark mode
  </p>

  <button
    x-on:click="darkMode = 'light'"
    class="transition-transform duration-150 hover:scale-125"
  >
    <Icon
      icon="ph:sun-light"
      x-bind:className="{'border-2 border-red/50 ': darkMode === 'light'}"
    />

    <span class="sr-only">light</span>
  </button>

  <button
    x-on:click="darkMode = 'dark'"
    class="transition-transform duration-150 hover:scale-125"
  >
    <Icon
      icon="ph:moon-light"
      x-bind:className="{'border-2 border-red/50': darkMode === 'dark'}"
    />
    <span class="sr-only">dark</span>
  </button>

  {
    enableSystem && (
      <button x-on:click="darkMode = 'system'">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          x-cloak
          x-show="! window.matchMedia('(prefers-color-scheme: dark)').matches"
          x-bind:class="{'border-2 border-red/50': darkMode === 'system'}"
          class="h-7 w-7 cursor-pointer rounded-full bg-gray-100 p-1 text-gray-700 transition hover:bg-gray-200"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          stroke-width="2"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
          />
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
          />
        </svg>

        <svg
          xmlns="http://www.w3.org/2000/svg"
          x-show="window.matchMedia('(prefers-color-scheme: dark)').matches"
          x-bind:class="{'border-2 border-red/50': darkMode === 'system'}"
          class="hidden h-7 w-7 cursor-pointer rounded-full bg-gray-700 p-1 text-gray-100 transition dark:hover:bg-gray-600"
          x-cloak
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          stroke-width="2"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
          />
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
          />
        </svg>
        <span class="sr-only">system</span>
      </button>
    )
  }
</div>

<script is:inline async defer>
  var nightwind = {
    beforeTransition: () => {
      const doc = document.documentElement;
      const onTransitionDone = () => {
        doc.classList.remove('nightwind');
        doc.removeEventListener('transitionend', onTransitionDone);
      };
      doc.addEventListener('transitionend', onTransitionDone);
      if (!doc.classList.contains('nightwind')) {
        doc.classList.add('nightwind');
      }
    },

    toggle: () => {
      nightwind.beforeTransition();
      if (!document.documentElement.classList.contains('dark')) {
        document.documentElement.classList.add('dark');
        window.localStorage.setItem('nightwind-mode', 'dark');
      } else {
        document.documentElement.classList.remove('dark');
        window.localStorage.setItem('nightwind-mode', 'light');
      }
    },

    enable: (dark) => {
      const mode = dark ? 'dark' : 'light';
      const opposite = dark ? 'light' : 'dark';

      nightwind.beforeTransition();

      if (document.documentElement.classList.contains(opposite)) {
        document.documentElement.classList.remove(opposite);
      }
      document.documentElement.classList.add(mode);
      window.localStorage.setItem('nightwind-mode', mode);
    }
  };

  (function () {
    function getInitialColorMode() {
      const persistedColorPreference =
        window.localStorage.getItem('nightwind-mode');
      const hasPersistedPreference =
        typeof persistedColorPreference === 'string';
      if (hasPersistedPreference) {
        return persistedColorPreference;
      }
      const mql = window.matchMedia('(prefers-color-scheme: dark)');
      const hasMediaQueryPreference = typeof mql.matches === 'boolean';
      if (hasMediaQueryPreference) {
        return mql.matches ? 'dark' : 'light';
      }
      return 'light';
    }
    getInitialColorMode() == 'light'
      ? document.documentElement.classList.remove('dark')
      : document.documentElement.classList.add('dark');
  })();
</script>

<style>
  /* Only keep screen reader styles as they're not available in Tailwind by default */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    border: 0;
  }
</style>
