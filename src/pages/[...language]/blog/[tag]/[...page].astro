---
import slugify from 'slugify';
import BlogList from 'src/components/blog/list.astro';
import BlogPagination from 'src/components/blog/pagination.astro';
import Layout from 'src/layouts/Layout.astro';
import { getCollection, getEntry, type CollectionEntry } from 'astro:content';
import { getBlogIndexPage, trailingSlash } from 'utils/permalinks';

// interface Page<T = any> {
//   /** array containing the pageâ€™s slice of data that you passed to the paginate() function */
//   data: T[];
//   /** metadata */
//   /** the count of the first item on the page, starting from 0 */
//   start: number;
//   /** the count of the last item on the page, starting from 0 */
//   end: number;
//   /** total number of results */
//   total: number;
//   /** the current page number, starting from 1 */
//   currentPage: number;
//   /** number of items per page (default: 10) */
//   size: number;
//   /** number of last page */
//   lastPage: number;
//   url: {
//     /** url of the current page */
//     current: string;
//     /** url of the previous page (if there is one) */
//     prev: string | undefined;
//     /** url of the next page (if there is one) */
//     next: string | undefined;
//     /** url of the first page (if the current page is not the first page) */
//     first: string | undefined;
//     /** url of the last page (if the current page in not the last page) */
//     last: string | undefined;
//   };
// }

export async function getStaticPaths({ paginate }: { paginate: Function }) {
  const posts = await getCollection('blog');

  const postPerLanguage = Map.groupBy(posts, (p) => p.data.language);
  const pageIndex = await Promise.all(
    postPerLanguage.entries().map(([language]) => getBlogIndexPage(language))
  );

  return Array.from(postPerLanguage).flatMap(([language, filteredPosts]) => {
    const tags = new Set(
      filteredPosts
        .flatMap((p) => p.data.tags ?? [])
        .filter((t) => t && t !== '')
    );

    const page = pageIndex.filter((p) => p.data.language === language)[0];
    const pageSize =
      page?.data && 'page_size' in page?.data ? page?.data.page_size : 6;

    return [...tags].flatMap((tag) => {
      const tagPosts = filteredPosts.filter(({ data }) =>
        data.tags?.includes(tag)
      );

      return paginate(tagPosts, {
        params: {
          blogTags: 'blog',
          language: language ?? 'en',
          tag:
            slugify(tag, { lower: true, strict: true, trim: true }) +
            trailingSlash
        },
        pageSize
      });
    });
  });
}

const tag = Astro.params.tag ?? '';
const page = (await getEntry('pages', 'blog'))!.data;

const pagination = Astro.props.page;
page.title = pagination.data
  .flatMap((p: CollectionEntry<'blog'>) => p.data.tags ?? [])
  .filter(
    (t: string) => slugify(t, { lower: true, strict: true, trim: true }) === tag
  )[0];
const filteredPosts = pagination.data;
---

<Layout title={page.title} seo={page.seo}>
  <div class="py-[96px]">
    <h1
      class="my-12 text-center text-3xl font-semibold first-letter:capitalize sm:text-4xl md:text-5xl lg:text-6xl"
    >
      {page.title}
    </h1>
    <section class="blog-index mx-auto">
      <BlogList posts={filteredPosts} />
      <BlogPagination pagination={pagination} />
    </section>
  </div>
</Layout>

<style>
  .blog-index {
    max-width: var(--pageContainer);
    padding-inline: var(--pagePadding);
  }
</style>
