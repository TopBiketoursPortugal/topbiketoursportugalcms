---
import { getCollection } from 'astro:content';
import slugify from 'slugify';
import type { SEOProps } from 'astro-seo';
import Layout from 'src/layouts/Layout.astro';
import TourList from 'src/components/tours/tour-list.astro';
import { getTourRegionLanguagesAlternates, getTourRegionsPath, trailingSlash } from 'utils/permalinks';
import { languageCodes, type LanguageCodes } from 'src/schemas/language';
import Stack from 'src/components/stack/stack.astro';
import Heading from 'src/components/typography/heading.astro';
import Text from 'src/components/typography/text.astro';
import LanguageData from 'src/../data/languages.json';
import SiteData from 'src/../data/site.json';
import { getImage } from 'astro:assets';

export async function getStaticPaths() {
  const tours = await getCollection('tours');
  const tourRegions = await getCollection('tourRegions');

  return languageCodes.flatMap((language) => {
    return tourRegions
      .filter((tr) => tr.data.language === language)
      .map((region) => ({
        params: {
          language: language === 'en' ? undefined : language,
          // toursType: PermalinkData.tours[language],
          region:
            slugify(region.data.name ?? region.data.title, {
              lower: true,
              strict: true,
              trim: true
            }) + trailingSlash
        },
        props: {
          regionData: region,
          tours:
            tours.filter(
              (tour) =>
                tour.data.region === region.data.id &&
                tour.data.language === language
            ) ?? []
        }
      }));
  });
}
const language = (Astro.currentLocale ?? 'en') as LanguageCodes;
const { tours, regionData } = Astro.props;

const packageTours = tours.filter((t) => t.data.tourtype === 'PackageTour');
const dayTours = tours.filter((t) => t.data.tourtype === 'DayTour');

const tourRegions = await getCollection(
  'tourRegions',
  (f) => f.data.language === language
);


const siteData = SiteData[language];
const baseUrl=Astro.site;

const images = import.meta.glob<{ default: ImageMetadata }>(
  '/src/assets/**/*.{jpeg,jpg,png,gif,avif,webp}',
  { eager: true }
);

const image=await getImage({src: images[regionData.data.seo?.featured_image!].default, format: 'avif'})

const imageSrc=image.src.startsWith("/")?image.src.substring(1):image.src;
const frontmatter = {
  title:  regionData.data.seo?.page_title?? regionData.data.title,
  page_size: 6,
  seo: {
    noindex: false,
    title: regionData.data.title??regionData.data.seo?.page_title,
    description: regionData.data.title??regionData.data.seo?.page_description,
    canonical: regionData.data.seo?.canonical_url?new URL(regionData.data.seo?.canonical_url):"",
    openGraph: {
      basic: {
        title:regionData.data.title??regionData.data.seo?.page_title,
        url: baseUrl,
        type: `${regionData.data.seo?.open_graph_type || 'website'}`,
        image: `${baseUrl}${imageSrc}`
      },
      optional: {
        description: regionData.data.title??regionData.data.seo?.page_description,
      },
      image: {
        url: `${baseUrl}${imageSrc}`,
        alt: regionData.data.seo?.featured_image_alt??regionData.data.title??regionData.data.seo?.page_title
      }
    },
    twitter: {
      creator: `${regionData.data.seo?.author_twitter_handle || siteData.twitter_site}`,
      site: `${siteData.twitter_site}`,
      card: 'summary_large_image'
    }

  }
} satisfies {
  title: string;
  page_size?: number;
  seo?: SEOProps;
};
const hrefs = await getTourRegionLanguagesAlternates(regionData, Astro.site);
---

<Layout
  class="mb-16 px-8"
  {...frontmatter}
  title={`Tour list region ${regionData.data.name}`}
hrefLangs={hrefs}>
  <slot slot="head">
    {
      hrefs.map(({ href, hreflang }) => (
        <link
          rel="alternate"
          href={href}
          hreflang={LanguageData[hreflang].locale}
        />
      ))
    }
  </slot>
  <div>
    {JSON.stringify(frontmatter.seo)}
  </div>
<Stack spacing="large" layout="vertical" class="pt-6">
  {
    packageTours.length > 0 ? (
      <Heading as="h1" class="px-6">Tour list region {regionData.data.name}</Heading>
      <TourList items={packageTours} language={language} />
    ) : null
  }
  {
    dayTours.length > 0 ? (
      <Heading as="h2"  class="px-6">Day tour list region {regionData.data.name}</Heading>
      <TourList items={dayTours} language={language} />
    ) : null
  }
  {
    packageTours.length == 0 && dayTours.length === 0 ? (
      <div class="flex flex-col px-6 gap-2">
        <Text size="xlarge" >No tours yet for region {regionData.data.name}</Text>
        <Text size="large">Could try other region:</Text>
        <ul class="list-disc pl-8">{tourRegions.filter((r) => r.data.id !== regionData.data.id)
                        .map((r) => (<li class="pl-2"><a href={getTourRegionsPath(r,language)} title={r.data.name ?? r.data.title} class="underline">{r.data.name ?? r.data.title}</a></li>))}</u>
      </div>
    ) : null
  }
  </Stack>
</Layout>
